**AI Prompt for Developing a Personalized Carbon Footprint Calculator Web Application**

**Objective**: Create a fully functional, client-side web application called "Personalized Carbon Footprint Calculator" using HTML, Bootstrap 5, and JavaScript. The app allows users to input daily habits (e.g., travel, diet, energy use), calculates their carbon footprint using predefined emission factors, and provides personalized suggestions to reduce their environmental impact. The app should incorporate data science concepts (e.g., statistical analysis), use responsive Bootstrap UI, and include interactive visualizations with Chart.js. It should be lightweight, accessible to all users, and deployable on platforms like GitHub Pages.

---

**Project Requirements**:

1. **Tech Stack**:
   - **HTML**: Structure the web page with semantic elements.
   - **Bootstrap 5**: Use for responsive design, forms, cards, modals, tooltips, and alerts.
   - **JavaScript**: Handle logic, calculations, local storage, and Chart.js for visualizations.
   - **Chart.js**: Include for interactive bar and pie charts.
   - **No backend**: All data processing is client-side, using a static JSON file for emission factors.
   - **External CDN**: Use CDNs for Bootstrap 5 and Chart.js to keep the app lightweight.

2. **Core Features**:
   - **User Input Form**:
     - Bootstrap form to collect daily habits: miles driven (car type: gas, electric, hybrid), public transport miles, flights (short/long haul), meals (meat, vegetarian, vegan), and energy use (kWh).
     - Use Bootstrap input groups, dropdowns, and validation (e.g., required fields, non-negative numbers).
     - Include tooltips explaining each input (e.g., "1 mile of gas car = ~0.4 kg CO2").
   - **Carbon Footprint Calculation**:
     - JavaScript function to calculate total CO2 emissions based on user inputs and a JSON dataset of emission factors (e.g., 0.4 kg CO2/mile for gas cars, 0.1 kg CO2/mile for buses).
     - Store emission factors in a `data/emissions.json` file (create a sample JSON with realistic values).
     - Compute daily, weekly, and annual footprint estimates (annual = daily × 365).
   - **Visualization**:
     - Use Chart.js to display:
       - A bar chart comparing user’s footprint to global averages (e.g., 5 tons/year per person).
       - A pie chart breaking down footprint by category (transport, diet, energy).
     - Ensure charts are responsive and styled to match Bootstrap’s theme (e.g., green for eco-friendly).
   - **Personalized Suggestions**:
     - JavaScript logic to suggest actions based on high-impact categories (e.g., if driving > 10 miles, suggest carpooling).
     - Display suggestions in Bootstrap cards with collapsible details and external links (e.g., to eco-friendly blogs).
   - **History Tracking**:
     - Save user inputs and results in local storage (key: `carbonFootprintHistory`).
     - Display past entries in a Bootstrap table, with options to delete entries.
   - **Accessibility**:
     - Use ARIA labels for form inputs and charts.
     - Ensure high-contrast Bootstrap theme for readability.
     - Support keyboard navigation for all interactive elements.

3. **Data Science Integration**:
   - **Statistical Analysis**:
     - Calculate mean and standard deviation of user’s footprint over saved history (using JavaScript).
     - Compare user’s footprint to global benchmarks (e.g., 5 tons/year average) and highlight deviations.
   - **Scoring Model**:
     - Implement a simple weighted scoring system to rank suggestions by impact (e.g., reducing car use > switching to LED bulbs).
     - Use JavaScript to compute weights based on emission reductions (e.g., 0.4 kg CO2/mile saved by biking).
   - **Trend Analysis**:
     - Detect trends in saved history (e.g., increasing car use) using a moving average calculation.
     - Display trends in a Bootstrap alert if footprint exceeds a threshold (e.g., 10% above average).

4. **UI/UX Design**:
   - **Layout**:
     - Bootstrap navbar with app title and links to “About” and “How It Works” modals.
     - Main section with input form (left) and results/charts (right) using Bootstrap grid (responsive for mobile).
     - Footer with credits and external links (e.g., EPA carbon data).
   - **Styling**:
     - Use Bootstrap’s `bg-success` and `text-white` for eco-themed buttons and headers.
     - Apply Bootstrap animations (e.g., fade-in for results) and modals for suggestions.
   - **Interactivity**:
     - Real-time input validation (e.g., alert if miles < 0).
     - Dynamic chart updates when form is submitted.
     - Bootstrap tooltips for educational tips (e.g., “Why vegan meals reduce CO2”).

5. **File Structure**:
   ```
   carbon-footprint-calculator/
   ├── index.html           # Main HTML file
   ├── css/
   │   └── styles.css      # Custom CSS for minor tweaks
   ├── js/
   │   └── app.js          # Main JavaScript logic
   ├── data/
   │   └── emissions.json  # Emission factors dataset
   ```
   - **emissions.json Example** (create a realistic dataset):
     ```json
     {
       "transport": {
         "car_gas": 0.4, // kg CO2/mile
         "car_electric": 0.15,
         "bus": 0.1,
         "flight_short": 0.25, // kg CO2/mile
         "flight_long": 0.2
       },
       "diet": {
         "meat": 7, // kg CO2/meal
         "vegetarian": 3,
         "vegan": 1.5
       },
       "energy": {
         "kwh": 0.5 // kg CO2/kWh
       },
       "global_avg": 5000 // kg CO2/year per person
     }
     ```

6. **Development Guidelines**:
   - **Code Quality**:
     - Write modular JavaScript (e.g., separate functions for calculations, chart rendering, storage).
     - Use ES6 syntax (e.g., arrow functions, destructuring).
     - Include comments explaining data science logic (e.g., why weights are chosen).
   - **Performance**:
     - Minimize DOM manipulations for chart updates (use Chart.js efficiently).
     - Optimize JSON parsing for small file size (< 10 KB).
   - **Error Handling**:
     - Handle invalid inputs (e.g., non-numeric values) with Bootstrap alerts.
     - Gracefully handle local storage errors (e.g., quota exceeded).
   - **Testing**:
     - Ensure app works on Chrome, Firefox, and mobile browsers.
     - Test responsiveness with Bootstrap’s breakpoints (xs, sm, md, lg).
     - Verify chart accessibility with screen readers.

7. **Deliverables**:
   - Complete `index.html` with Bootstrap 5 CDN, semantic structure, and embedded Chart.js.
   - `styles.css` for minor customizations (e.g., chart margins).
   - `app.js` with all logic: form handling, calculations, Chart.js integration, local storage, and suggestions.
   - `emissions.json` with realistic emission factors and global benchmarks.
   - README.md with setup instructions, data sources, and data science explanation.

8. **Example Workflow**:
   - User opens app, sees Bootstrap form with tooltips.
   - Inputs: 10 miles (gas car), 2 meat meals, 5 kWh energy.
   - JavaScript calculates: (10 × 0.4) + (2 × 7) + (5 × 0.5) = 20.5 kg CO2/day.
   - Displays annual estimate (20.5 × 365 ≈ 7500 kg) vs. global average (5000 kg).
   - Shows bar chart (user vs. average) and pie chart (transport: 4 kg, diet: 14 kg, energy: 2.5 kg).
   - Suggests: “Switch to biking 5 miles/day to save 2 kg CO2” in a Bootstrap card.
   - Saves entry to local storage and shows history table.

9. **Constraints**:
   - No server-side processing or external APIs (all data in `emissions.json`).
   - Keep app lightweight for GitHub Pages deployment.
   - Ensure GDPR compliance by using local storage only (no user data collection).
   - Avoid `<form>` onSubmit due to sandbox restrictions; use button click events instead.

10. **Output Format**:
    - Generate all files (`index.html`, `styles.css`, `app.js`, `emissions.json`) as separate artifacts.
    - Wrap each file in its own `<xaiArtifact>` tag with unique `artifact_id`, appropriate `title` (e.g., `index.html`), and correct `contentType` (e.g., `text/html`, `text/css`, `text/javascript`, `application/json`).
    - Provide a brief explanation in `README.md` (in `text/markdown`) covering setup, data science methods, and usage.

**Prompt Instructions for AI**:
- Generate complete, error-free code for all files, ensuring Bootstrap 5 and Chart.js CDNs are included.
- Implement data science logic (e.g., mean, standard deviation, weighted scoring) in JavaScript with clear comments.
- Ensure all features (form, calculations, charts, suggestions, storage) work seamlessly.
- Use Bootstrap classes for responsiveness and aesthetics (e.g., `container`, `row`, `col-md-6`).
- Test code mentally for edge cases (e.g., empty inputs, large datasets).
- Output each file in a separate `<xaiArtifact>` tag with unique UUIDs for `artifact_id`.

**Additional Notes**:
- Prioritize user-friendly design with Bootstrap’s green palette for eco-theme.
- Include realistic emission factors based on credible sources (e.g., EPA, IPCC).
- Make the app educational by adding tooltips and modals explaining carbon footprints.
- Ensure charts are clear, with labels and legends matching Bootstrap’s style.

**End of Prompt**